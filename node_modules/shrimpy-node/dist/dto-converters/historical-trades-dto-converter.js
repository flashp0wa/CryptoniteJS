"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var date_dto_converter_1 = require("./date-dto-converter");
var decimal_dto_converter_1 = require("./decimal-dto-converter");
var TakerSideDtoConverter = /** @class */ (function () {
    function TakerSideDtoConverter() {
    }
    TakerSideDtoConverter.prototype.convertFromDto = function (dto) {
        if (dto == "buyer") {
            return "buyer";
        }
        else if (dto == "seller") {
            return "seller";
        }
        return "unknown";
    };
    TakerSideDtoConverter.prototype.convertToDto = function (model) {
        return model.toString();
    };
    return TakerSideDtoConverter;
}());
exports.TakerSideDtoConverter = TakerSideDtoConverter;
var HistoricalTradesDtoConverter = /** @class */ (function () {
    function HistoricalTradesDtoConverter() {
        this._dateDtoConverter = new date_dto_converter_1.DateDtoConverter();
        this._decimalDtoConverter = new decimal_dto_converter_1.DecimalDtoConverter();
        this._takerSideDtoConverter = new TakerSideDtoConverter();
    }
    HistoricalTradesDtoConverter.prototype.convertFromDto = function (dto) {
        var _this = this;
        return dto.map(function (historicalTradeDto) {
            var historicalTrade = {
                time: _this._dateDtoConverter.convertFromDto(historicalTradeDto.time),
                price: _this._decimalDtoConverter.convertFromDto(historicalTradeDto.price),
                size: _this._decimalDtoConverter.convertFromDto(historicalTradeDto.size),
                takerSide: _this._takerSideDtoConverter.convertFromDto(historicalTradeDto.takerSide)
            };
            return historicalTrade;
        });
    };
    HistoricalTradesDtoConverter.prototype.convertToDto = function (model) {
        var _this = this;
        return model.map(function (historicalTrade) {
            var historicalTradeDto = {
                time: _this._dateDtoConverter.convertToDto(historicalTrade.time),
                price: _this._decimalDtoConverter.convertToDto(historicalTrade.price),
                size: _this._decimalDtoConverter.convertToDto(historicalTrade.size),
                takerSide: _this._takerSideDtoConverter.convertToDto(historicalTrade.takerSide)
            };
            return historicalTradeDto;
        });
    };
    return HistoricalTradesDtoConverter;
}());
exports.HistoricalTradesDtoConverter = HistoricalTradesDtoConverter;
//# sourceMappingURL=historical-trades-dto-converter.js.map